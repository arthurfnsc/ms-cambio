plugins {

    id "com.appmattus.markdown" version "0.6.0" apply false
    id "com.github.ben-manes.versions" version "0.29.0" apply false
    id 'info.solidsoft.pitest' version '1.5.1'
    id "io.gitlab.arturbosch.detekt" version "1.12.0" apply false
    id "net.corda.plugins.cordapp" version "5.0.11"
    id "net.corda.plugins.cordformation" version "5.0.11"
    id "net.corda.plugins.quasar-utils" version "5.0.11"
    id "net.ossindex.audit" version "0.4.11" apply false
    id "org.jetbrains.dokka" version "0.10.1" apply false
    id "org.jetbrains.kotlin.jvm" version "1.4.0"
    id "org.owasp.dependencycheck" version "5.3.2.1" apply false
    id "org.sonarqube" version "3.0" apply false
}

ext {

    aptVersion = "0.21"
    archUnitVersion = '0.14.1'
    artemisJmsVersion = "2.6.2"
    assertJVersion = "3.17.1"
    cordaVersion = "4.5"
    cordaPluginVersion = "5.0.11"
    detektVersion = "1.12.0"
    gradleWrapperVersion = "6.6.1"
    jacksonDatabindNullableVersion = "0.2.1"
    jsonVersion = "1.1.4"
    junitVersion = "5.6.2"
    kotlinVersion = "1.4.0"
    log4jVersion= "2.11.2"
    mapstructKotlinVersion = "1.4.0.0"
    mapstructVersion = "1.3.1.Final"
    mockitoVersion = "3.5.10"
    openAPIGeneratorVersion = "4.3.0"
    slf4jVersion = "1.7.29"
    springBootVersion = "2.3.3.RELEASE"
    springDependencyVersion = "1.0.10.RELEASE"
    springFoxVersion = "3.0.0"

    cordaGroup = "net.corda"
    kotlinGroup = "org.jetbrains.kotlin"
    log4jGroup = "org.apache.logging.log4j"
    springBootGroup = "org.springframework.boot"
    springFoxGroup = "io.springfox"

    corda_release_version = cordaVersion

    libs = [
        corda : [
            "$cordaGroup:corda-core:$cordaVersion",
            "$cordaGroup:corda-jackson:$cordaVersion",
            "$cordaGroup:corda-node-api:$cordaVersion",
            "$cordaGroup:corda-rpc:$cordaVersion"
        ],
        openApiServer : [
            "org.openapitools:jackson-databind-nullable:$jacksonDatabindNullableVersion"
        ],
        springBoot : [
            "$springBootGroup:spring-boot-starter",
            "$springBootGroup:spring-boot-starter-validation",
            "$springBootGroup:spring-boot-starter-web"
        ],
        springFox : [
            "$springFoxGroup:springfox-boot-starter:$springFoxVersion"
        ]
    ]
}

group = "br.com.fiap.mba.ms-cambio"
version = "0.0.1-SNAPSHOT"

apply from: "$rootDir/plugins/sonarqube.gradle"

configure(allprojects - project(":application")) {

    apply from: "$rootDir/plugins/kotlin.gradle"

    apply from: "$rootDir/plugins/docs.gradle"
    apply from: "$rootDir/plugins/ides.gradle"
    apply from: "$rootDir/plugins/jacoco.gradle"
    apply from: "$rootDir/plugins/lint.gradle"
    apply from: "$rootDir/plugins/security.gradle"

    repositories {

        mavenLocal()
        mavenCentral()
        maven {url "https://ci-artifactory.corda.r3cev.com/artifactory/corda"}
        jcenter()
    }

    dependencies {

        libs.kotlin = [
            "$kotlinGroup:kotlin-reflect",
            "$kotlinGroup:kotlin-stdlib-jdk8"
        ]
        libs.unitTest = [
            "com.tngtech.archunit:archunit-junit5:$archUnitVersion",
            "org.assertj:assertj-core:$assertJVersion",
            "org.junit.jupiter:junit-jupiter-api:$junitVersion",
            "org.mockito:mockito-core:$mockitoVersion"
        ]

        detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion"

        implementation libs.kotlin

        testImplementation libs.unitTest

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    }

    test {

        useJUnitPlatform()
    }
}

subprojects {

    pitest {

        avoidCallsTo = ["kotlin.jvm.internal", "org.slf4j"]
        junit5PluginVersion = '0.12'
        historyInputLocation = file("$buildDir/pitest")
        historyOutputLocation = file("$buildDir/pitest")
        jvmArgs = ['-Dspring.test.constructor.autowire.mode=all']
        mutators = ["STRONGER"]
        pitestVersion = '1.5.2'
        targetClasses = ['br.com.fiap.mba.*']

        if (project.name in ['application']) {
            failWhenNoMutations = false
        }
    }
}

dependencies {

    cordaCompile libs.corda

    cordaRuntime "$cordaGroup:corda:$cordaVersion"

    cordapp project(":application:cordapp-contracts-states")
    cordapp project(":application:cordapp-flows")

    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "org.slf4j:slf4j-simple:$slf4jVersion"
}

wrapper {

    gradleVersion = "$gradleWrapperVersion"
}

cordapp {

    targetPlatformVersion 7
    minimumPlatformVersion 7

    contract {
        name "Cambio Contracts"
        vendor "Nameless"
        licence "A liberal, open source licence"
        versionId 1
    }
    workflow {
        name "Cambio Flows"
        vendor "Nameless"
        licence "A liberal, open source licence"
        versionId 1
    }
}

pitest {
    testPlugin = "junit5"
    targetClasses = ['br.com.fiap.mba.*']  //by default "${project.group}.*"
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false

    if (project.name in ['application', 'cordapp-contracts-states', 'cordapp-flows']) {
        failWhenNoMutations = false
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {

    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        throw new GradleException("This build must be run with java 8")
    }

    directory "$rootDir/build/nodes"

    nodeDefaults {
        projectCordapp { deploy = false }
        cordapp project(':application:cordapp-contracts-states')
        cordapp project(':application:cordapp-flows')
    }

    node {
        name "O=Banco,L=Brasilia,C=BR"
        p2pPort 10000
        rpcSettings {
            address("localhost:10010")
            adminAddress("localhost:10020")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    node {
        name "O=Corretora,L=SÃ£o Paulo,C=BR"
        p2pPort 10001
        rpcSettings {
            address("localhost:10011")
            adminAddress("localhost:10021")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10022")
        }
    }
}

task jacocoRootReport(type: JacocoReport) {

    def publishedProjects = project(":application").subprojects

    dependsOn = publishedProjects.test

    additionalSourceDirs.from = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories.from =  files(publishedProjects.sourceSets.main.output)
    executionData.from = files(publishedProjects.jacocoTestReport.executionData)
    sourceDirectories.from = files(publishedProjects.sourceSets.main.allSource.srcDirs)

    doFirst {
        getExecutionData().setFrom(files(executionData.findAll {
            it.exists()
        }))
    }

    onlyIf = {
        true
    }

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                exclude: [
                    '**/openapi/cambio/**'
                ]
            )
        }))
    }
}
